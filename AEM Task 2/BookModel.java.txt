package com.example.core.models;

import com.adobe.cq.sightly.WCMUsePojo;
import com.day.cq.search.PredicateGroup;
import com.day.cq.search.Query;
import com.day.cq.search.QueryBuilder;
import com.day.cq.search.result.Hit;
import com.day.cq.search.result.SearchResult;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.models.annotations.DefaultInjectionStrategy;
import org.apache.sling.models.annotations.Model;
import org.apache.sling.models.annotations.injectorspecific.Self;
import org.apache.sling.models.annotations.injectorspecific.ValueMapValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.inject.Inject;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;

@Model(adaptables = {SlingHttpServletRequest.class}, defaultInjectionStrategy = DefaultInjectionStrategy.OPTIONAL)
public class BookModel {

    private static final Logger LOG = LoggerFactory.getLogger(BookModel.class);

    @Self
    private SlingHttpServletRequest request;

    @Inject
    private QueryBuilder queryBuilder;

    @ValueMapValue
    private String bookRootPath;

    @ValueMapValue
    private String loadMoreCta;

    private List<BookItem> books;

    public List<BookItem> getBooks() {
        if (books == null) {
            books = fetchBooks();
        }
        return books;
    }

    private List<BookItem> fetchBooks() {
        List<BookItem> bookList = new ArrayList<>();

        try {
            Map<String, String> queryMap = Map.of(
                "path", bookRootPath,
                "type", "cq:Page",
                "orderby", "@jcr:content/cq:lastModified",
                "orderby.sort", "desc",
                "p.limit", "10"
            );

            Query query = queryBuilder.createQuery(PredicateGroup.create(queryMap), request.getResourceResolver().adaptTo(Session.class));
            SearchResult result = query.getResult();

            for (Hit hit : result.getHits()) {
                Resource bookPage = hit.getResource();
                Resource bookContent = bookPage.getChild("jcr:content");

                if (bookContent != null) {
                    bookList.add(new BookItem(
                        bookPage.getName(),
                        bookContent.getValueMap().get("bookImage", String.class),
                        bookContent.getValueMap().get("bookDescription", String.class),
                        bookContent.getValueMap().get("publishDate", String.class)
                    ));
                }
            }
        } catch (Exception e) {
            LOG.error("Error fetching books: ", e);
        }

        return bookList;
    }

    public String getLoadMoreCta() {
        return loadMoreCta;
    }

    public static class BookItem {
        private final String name;
        private final String image;
        private final String description;
        private final String publishDate;

        public BookItem(String name, String image, String description, String publishDate) {
            this.name = name;
            this.image = image;
            this.description = description;
            this.publishDate = publishDate;
        }

        public String getName() {
            return name;
        }

        public String getImage() {
            return image;
        }

        public String getDescription() {
            return description;
        }

        public String getPublishDate() {
            return publishDate;
        }
    }
}
